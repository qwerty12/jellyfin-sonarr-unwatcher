// Package jellygen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package jellygen

import (
	"encoding/json"
	"fmt"
	"time"
)

const (
	CustomAuthenticationScopes = "CustomAuthentication.Scopes"
)

// Defines values for AudioSpatialFormat.
const (
	AudioSpatialFormatDTSX       AudioSpatialFormat = "DTSX"
	AudioSpatialFormatDolbyAtmos AudioSpatialFormat = "DolbyAtmos"
	AudioSpatialFormatNone       AudioSpatialFormat = "None"
)

// Defines values for BaseItemKind.
const (
	BaseItemKindAggregateFolder       BaseItemKind = "AggregateFolder"
	BaseItemKindAudio                 BaseItemKind = "Audio"
	BaseItemKindAudioBook             BaseItemKind = "AudioBook"
	BaseItemKindBasePluginFolder      BaseItemKind = "BasePluginFolder"
	BaseItemKindBook                  BaseItemKind = "Book"
	BaseItemKindBoxSet                BaseItemKind = "BoxSet"
	BaseItemKindChannel               BaseItemKind = "Channel"
	BaseItemKindChannelFolderItem     BaseItemKind = "ChannelFolderItem"
	BaseItemKindCollectionFolder      BaseItemKind = "CollectionFolder"
	BaseItemKindEpisode               BaseItemKind = "Episode"
	BaseItemKindFolder                BaseItemKind = "Folder"
	BaseItemKindGenre                 BaseItemKind = "Genre"
	BaseItemKindLiveTvChannel         BaseItemKind = "LiveTvChannel"
	BaseItemKindLiveTvProgram         BaseItemKind = "LiveTvProgram"
	BaseItemKindManualPlaylistsFolder BaseItemKind = "ManualPlaylistsFolder"
	BaseItemKindMovie                 BaseItemKind = "Movie"
	BaseItemKindMusicAlbum            BaseItemKind = "MusicAlbum"
	BaseItemKindMusicArtist           BaseItemKind = "MusicArtist"
	BaseItemKindMusicGenre            BaseItemKind = "MusicGenre"
	BaseItemKindMusicVideo            BaseItemKind = "MusicVideo"
	BaseItemKindPerson                BaseItemKind = "Person"
	BaseItemKindPhoto                 BaseItemKind = "Photo"
	BaseItemKindPhotoAlbum            BaseItemKind = "PhotoAlbum"
	BaseItemKindPlaylist              BaseItemKind = "Playlist"
	BaseItemKindPlaylistsFolder       BaseItemKind = "PlaylistsFolder"
	BaseItemKindProgram               BaseItemKind = "Program"
	BaseItemKindRecording             BaseItemKind = "Recording"
	BaseItemKindSeason                BaseItemKind = "Season"
	BaseItemKindSeries                BaseItemKind = "Series"
	BaseItemKindStudio                BaseItemKind = "Studio"
	BaseItemKindTrailer               BaseItemKind = "Trailer"
	BaseItemKindTvChannel             BaseItemKind = "TvChannel"
	BaseItemKindTvProgram             BaseItemKind = "TvProgram"
	BaseItemKindUserRootFolder        BaseItemKind = "UserRootFolder"
	BaseItemKindUserView              BaseItemKind = "UserView"
	BaseItemKindVideo                 BaseItemKind = "Video"
	BaseItemKindYear                  BaseItemKind = "Year"
)

// Defines values for ChannelType.
const (
	Radio ChannelType = "Radio"
	TV    ChannelType = "TV"
)

// Defines values for CodecType.
const (
	CodecTypeAudio      CodecType = "Audio"
	CodecTypeVideo      CodecType = "Video"
	CodecTypeVideoAudio CodecType = "VideoAudio"
)

// Defines values for CollectionType.
const (
	CollectionTypeBooks       CollectionType = "books"
	CollectionTypeBoxsets     CollectionType = "boxsets"
	CollectionTypeFolders     CollectionType = "folders"
	CollectionTypeHomevideos  CollectionType = "homevideos"
	CollectionTypeLivetv      CollectionType = "livetv"
	CollectionTypeMovies      CollectionType = "movies"
	CollectionTypeMusic       CollectionType = "music"
	CollectionTypeMusicvideos CollectionType = "musicvideos"
	CollectionTypePhotos      CollectionType = "photos"
	CollectionTypePlaylists   CollectionType = "playlists"
	CollectionTypeTrailers    CollectionType = "trailers"
	CollectionTypeTvshows     CollectionType = "tvshows"
	CollectionTypeUnknown     CollectionType = "unknown"
)

// Defines values for DayOfWeek.
const (
	DayOfWeekFriday    DayOfWeek = "Friday"
	DayOfWeekMonday    DayOfWeek = "Monday"
	DayOfWeekSaturday  DayOfWeek = "Saturday"
	DayOfWeekSunday    DayOfWeek = "Sunday"
	DayOfWeekThursday  DayOfWeek = "Thursday"
	DayOfWeekTuesday   DayOfWeek = "Tuesday"
	DayOfWeekWednesday DayOfWeek = "Wednesday"
)

// Defines values for DlnaProfileType.
const (
	DlnaProfileTypeAudio    DlnaProfileType = "Audio"
	DlnaProfileTypeLyric    DlnaProfileType = "Lyric"
	DlnaProfileTypePhoto    DlnaProfileType = "Photo"
	DlnaProfileTypeSubtitle DlnaProfileType = "Subtitle"
	DlnaProfileTypeVideo    DlnaProfileType = "Video"
)

// Defines values for DynamicDayOfWeek.
const (
	DynamicDayOfWeekEveryday  DynamicDayOfWeek = "Everyday"
	DynamicDayOfWeekFriday    DynamicDayOfWeek = "Friday"
	DynamicDayOfWeekMonday    DynamicDayOfWeek = "Monday"
	DynamicDayOfWeekSaturday  DynamicDayOfWeek = "Saturday"
	DynamicDayOfWeekSunday    DynamicDayOfWeek = "Sunday"
	DynamicDayOfWeekThursday  DynamicDayOfWeek = "Thursday"
	DynamicDayOfWeekTuesday   DynamicDayOfWeek = "Tuesday"
	DynamicDayOfWeekWednesday DynamicDayOfWeek = "Wednesday"
	DynamicDayOfWeekWeekday   DynamicDayOfWeek = "Weekday"
	DynamicDayOfWeekWeekend   DynamicDayOfWeek = "Weekend"
)

// Defines values for EncodingContext.
const (
	Static    EncodingContext = "Static"
	Streaming EncodingContext = "Streaming"
)

// Defines values for ExtraType.
const (
	ExtraTypeBehindTheScenes ExtraType = "BehindTheScenes"
	ExtraTypeClip            ExtraType = "Clip"
	ExtraTypeDeletedScene    ExtraType = "DeletedScene"
	ExtraTypeFeaturette      ExtraType = "Featurette"
	ExtraTypeInterview       ExtraType = "Interview"
	ExtraTypeSample          ExtraType = "Sample"
	ExtraTypeScene           ExtraType = "Scene"
	ExtraTypeShort           ExtraType = "Short"
	ExtraTypeThemeSong       ExtraType = "ThemeSong"
	ExtraTypeThemeVideo      ExtraType = "ThemeVideo"
	ExtraTypeTrailer         ExtraType = "Trailer"
	ExtraTypeUnknown         ExtraType = "Unknown"
)

// Defines values for ForgotPasswordAction.
const (
	ContactAdmin      ForgotPasswordAction = "ContactAdmin"
	InNetworkRequired ForgotPasswordAction = "InNetworkRequired"
	PinCode           ForgotPasswordAction = "PinCode"
)

// Defines values for GeneralCommandType.
const (
	Back                   GeneralCommandType = "Back"
	ChannelDown            GeneralCommandType = "ChannelDown"
	ChannelUp              GeneralCommandType = "ChannelUp"
	DisplayContent         GeneralCommandType = "DisplayContent"
	DisplayMessage         GeneralCommandType = "DisplayMessage"
	GoHome                 GeneralCommandType = "GoHome"
	GoToSearch             GeneralCommandType = "GoToSearch"
	GoToSettings           GeneralCommandType = "GoToSettings"
	Guide                  GeneralCommandType = "Guide"
	MoveDown               GeneralCommandType = "MoveDown"
	MoveLeft               GeneralCommandType = "MoveLeft"
	MoveRight              GeneralCommandType = "MoveRight"
	MoveUp                 GeneralCommandType = "MoveUp"
	Mute                   GeneralCommandType = "Mute"
	NextLetter             GeneralCommandType = "NextLetter"
	PageDown               GeneralCommandType = "PageDown"
	PageUp                 GeneralCommandType = "PageUp"
	Play                   GeneralCommandType = "Play"
	PlayMediaSource        GeneralCommandType = "PlayMediaSource"
	PlayNext               GeneralCommandType = "PlayNext"
	PlayState              GeneralCommandType = "PlayState"
	PlayTrailers           GeneralCommandType = "PlayTrailers"
	PreviousLetter         GeneralCommandType = "PreviousLetter"
	Select                 GeneralCommandType = "Select"
	SendKey                GeneralCommandType = "SendKey"
	SendString             GeneralCommandType = "SendString"
	SetAudioStreamIndex    GeneralCommandType = "SetAudioStreamIndex"
	SetMaxStreamingBitrate GeneralCommandType = "SetMaxStreamingBitrate"
	SetPlaybackOrder       GeneralCommandType = "SetPlaybackOrder"
	SetRepeatMode          GeneralCommandType = "SetRepeatMode"
	SetShuffleQueue        GeneralCommandType = "SetShuffleQueue"
	SetSubtitleStreamIndex GeneralCommandType = "SetSubtitleStreamIndex"
	SetVolume              GeneralCommandType = "SetVolume"
	TakeScreenshot         GeneralCommandType = "TakeScreenshot"
	ToggleContextMenu      GeneralCommandType = "ToggleContextMenu"
	ToggleFullscreen       GeneralCommandType = "ToggleFullscreen"
	ToggleMute             GeneralCommandType = "ToggleMute"
	ToggleOsd              GeneralCommandType = "ToggleOsd"
	ToggleOsdMenu          GeneralCommandType = "ToggleOsdMenu"
	ToggleStats            GeneralCommandType = "ToggleStats"
	Unmute                 GeneralCommandType = "Unmute"
	VolumeDown             GeneralCommandType = "VolumeDown"
	VolumeUp               GeneralCommandType = "VolumeUp"
)

// Defines values for HardwareAccelerationType.
const (
	HardwareAccelerationTypeAmf          HardwareAccelerationType = "amf"
	HardwareAccelerationTypeNone         HardwareAccelerationType = "none"
	HardwareAccelerationTypeNvenc        HardwareAccelerationType = "nvenc"
	HardwareAccelerationTypeQsv          HardwareAccelerationType = "qsv"
	HardwareAccelerationTypeRkmpp        HardwareAccelerationType = "rkmpp"
	HardwareAccelerationTypeV4l2m2m      HardwareAccelerationType = "v4l2m2m"
	HardwareAccelerationTypeVaapi        HardwareAccelerationType = "vaapi"
	HardwareAccelerationTypeVideotoolbox HardwareAccelerationType = "videotoolbox"
)

// Defines values for ImageOrientation.
const (
	BottomLeft  ImageOrientation = "BottomLeft"
	BottomRight ImageOrientation = "BottomRight"
	LeftBottom  ImageOrientation = "LeftBottom"
	LeftTop     ImageOrientation = "LeftTop"
	RightBottom ImageOrientation = "RightBottom"
	RightTop    ImageOrientation = "RightTop"
	TopLeft     ImageOrientation = "TopLeft"
	TopRight    ImageOrientation = "TopRight"
)

// Defines values for IsoType.
const (
	IsoTypeBluRay IsoType = "BluRay"
	IsoTypeDvd    IsoType = "Dvd"
)

// Defines values for LocationType.
const (
	FileSystem LocationType = "FileSystem"
	Offline    LocationType = "Offline"
	Remote     LocationType = "Remote"
	Virtual    LocationType = "Virtual"
)

// Defines values for MediaProtocol.
const (
	MediaProtocolFile MediaProtocol = "File"
	MediaProtocolFtp  MediaProtocol = "Ftp"
	MediaProtocolHttp MediaProtocol = "Http"
	MediaProtocolRtmp MediaProtocol = "Rtmp"
	MediaProtocolRtp  MediaProtocol = "Rtp"
	MediaProtocolRtsp MediaProtocol = "Rtsp"
	MediaProtocolUdp  MediaProtocol = "Udp"
)

// Defines values for MediaSourceType.
const (
	MediaSourceTypeDefault     MediaSourceType = "Default"
	MediaSourceTypeGrouping    MediaSourceType = "Grouping"
	MediaSourceTypePlaceholder MediaSourceType = "Placeholder"
)

// Defines values for MediaStreamVideoRangeType.
const (
	MediaStreamVideoRangeTypeDOVI          MediaStreamVideoRangeType = "DOVI"
	MediaStreamVideoRangeTypeDOVIWithHDR10 MediaStreamVideoRangeType = "DOVIWithHDR10"
	MediaStreamVideoRangeTypeDOVIWithHLG   MediaStreamVideoRangeType = "DOVIWithHLG"
	MediaStreamVideoRangeTypeDOVIWithSDR   MediaStreamVideoRangeType = "DOVIWithSDR"
	MediaStreamVideoRangeTypeHDR10         MediaStreamVideoRangeType = "HDR10"
	MediaStreamVideoRangeTypeHDR10Plus     MediaStreamVideoRangeType = "HDR10Plus"
	MediaStreamVideoRangeTypeHLG           MediaStreamVideoRangeType = "HLG"
	MediaStreamVideoRangeTypeSDR           MediaStreamVideoRangeType = "SDR"
	MediaStreamVideoRangeTypeUnknown       MediaStreamVideoRangeType = "Unknown"
)

// Defines values for MediaStreamProtocol.
const (
	MediaStreamProtocolHls  MediaStreamProtocol = "hls"
	MediaStreamProtocolHttp MediaStreamProtocol = "http"
)

// Defines values for MediaStreamType.
const (
	MediaStreamTypeAudio         MediaStreamType = "Audio"
	MediaStreamTypeData          MediaStreamType = "Data"
	MediaStreamTypeEmbeddedImage MediaStreamType = "EmbeddedImage"
	MediaStreamTypeLyric         MediaStreamType = "Lyric"
	MediaStreamTypeSubtitle      MediaStreamType = "Subtitle"
	MediaStreamTypeVideo         MediaStreamType = "Video"
)

// Defines values for MediaType.
const (
	MediaTypeAudio   MediaType = "Audio"
	MediaTypeBook    MediaType = "Book"
	MediaTypePhoto   MediaType = "Photo"
	MediaTypeUnknown MediaType = "Unknown"
	MediaTypeVideo   MediaType = "Video"
)

// Defines values for MetadataField.
const (
	Cast                MetadataField = "Cast"
	Genres              MetadataField = "Genres"
	Name                MetadataField = "Name"
	OfficialRating      MetadataField = "OfficialRating"
	Overview            MetadataField = "Overview"
	ProductionLocations MetadataField = "ProductionLocations"
	Runtime             MetadataField = "Runtime"
	Studios             MetadataField = "Studios"
	Tags                MetadataField = "Tags"
)

// Defines values for PersonKind.
const (
	PersonKindActor       PersonKind = "Actor"
	PersonKindAlbumArtist PersonKind = "AlbumArtist"
	PersonKindArranger    PersonKind = "Arranger"
	PersonKindArtist      PersonKind = "Artist"
	PersonKindAuthor      PersonKind = "Author"
	PersonKindColorist    PersonKind = "Colorist"
	PersonKindComposer    PersonKind = "Composer"
	PersonKindConductor   PersonKind = "Conductor"
	PersonKindCoverArtist PersonKind = "CoverArtist"
	PersonKindCreator     PersonKind = "Creator"
	PersonKindDirector    PersonKind = "Director"
	PersonKindEditor      PersonKind = "Editor"
	PersonKindEngineer    PersonKind = "Engineer"
	PersonKindGuestStar   PersonKind = "GuestStar"
	PersonKindIllustrator PersonKind = "Illustrator"
	PersonKindInker       PersonKind = "Inker"
	PersonKindLetterer    PersonKind = "Letterer"
	PersonKindLyricist    PersonKind = "Lyricist"
	PersonKindMixer       PersonKind = "Mixer"
	PersonKindPenciller   PersonKind = "Penciller"
	PersonKindProducer    PersonKind = "Producer"
	PersonKindRemixer     PersonKind = "Remixer"
	PersonKindTranslator  PersonKind = "Translator"
	PersonKindUnknown     PersonKind = "Unknown"
	PersonKindWriter      PersonKind = "Writer"
)

// Defines values for PlayAccess.
const (
	PlayAccessFull PlayAccess = "Full"
	PlayAccessNone PlayAccess = "None"
)

// Defines values for PlayMethod.
const (
	DirectPlay   PlayMethod = "DirectPlay"
	DirectStream PlayMethod = "DirectStream"
	Transcode    PlayMethod = "Transcode"
)

// Defines values for PlaybackOrder.
const (
	PlaybackOrderDefault PlaybackOrder = "Default"
	PlaybackOrderShuffle PlaybackOrder = "Shuffle"
)

// Defines values for ProfileConditionType.
const (
	Equals           ProfileConditionType = "Equals"
	EqualsAny        ProfileConditionType = "EqualsAny"
	GreaterThanEqual ProfileConditionType = "GreaterThanEqual"
	LessThanEqual    ProfileConditionType = "LessThanEqual"
	NotEquals        ProfileConditionType = "NotEquals"
)

// Defines values for ProfileConditionValue.
const (
	AudioBitDepth    ProfileConditionValue = "AudioBitDepth"
	AudioBitrate     ProfileConditionValue = "AudioBitrate"
	AudioChannels    ProfileConditionValue = "AudioChannels"
	AudioProfile     ProfileConditionValue = "AudioProfile"
	AudioSampleRate  ProfileConditionValue = "AudioSampleRate"
	Has64BitOffsets  ProfileConditionValue = "Has64BitOffsets"
	Height           ProfileConditionValue = "Height"
	IsAnamorphic     ProfileConditionValue = "IsAnamorphic"
	IsAvc            ProfileConditionValue = "IsAvc"
	IsInterlaced     ProfileConditionValue = "IsInterlaced"
	IsSecondaryAudio ProfileConditionValue = "IsSecondaryAudio"
	NumAudioStreams  ProfileConditionValue = "NumAudioStreams"
	NumVideoStreams  ProfileConditionValue = "NumVideoStreams"
	PacketLength     ProfileConditionValue = "PacketLength"
	RefFrames        ProfileConditionValue = "RefFrames"
	VideoBitDepth    ProfileConditionValue = "VideoBitDepth"
	VideoBitrate     ProfileConditionValue = "VideoBitrate"
	VideoCodecTag    ProfileConditionValue = "VideoCodecTag"
	VideoFramerate   ProfileConditionValue = "VideoFramerate"
	VideoLevel       ProfileConditionValue = "VideoLevel"
	VideoProfile     ProfileConditionValue = "VideoProfile"
	VideoRangeType   ProfileConditionValue = "VideoRangeType"
	VideoTimestamp   ProfileConditionValue = "VideoTimestamp"
	Width            ProfileConditionValue = "Width"
)

// Defines values for ProgramAudio.
const (
	Atmos        ProgramAudio = "Atmos"
	Dolby        ProgramAudio = "Dolby"
	DolbyDigital ProgramAudio = "DolbyDigital"
	Mono         ProgramAudio = "Mono"
	Stereo       ProgramAudio = "Stereo"
	Thx          ProgramAudio = "Thx"
)

// Defines values for RepeatMode.
const (
	RepeatAll  RepeatMode = "RepeatAll"
	RepeatNone RepeatMode = "RepeatNone"
	RepeatOne  RepeatMode = "RepeatOne"
)

// Defines values for SubtitleDeliveryMethod.
const (
	Drop     SubtitleDeliveryMethod = "Drop"
	Embed    SubtitleDeliveryMethod = "Embed"
	Encode   SubtitleDeliveryMethod = "Encode"
	External SubtitleDeliveryMethod = "External"
	Hls      SubtitleDeliveryMethod = "Hls"
)

// Defines values for SubtitlePlaybackMode.
const (
	SubtitlePlaybackModeAlways     SubtitlePlaybackMode = "Always"
	SubtitlePlaybackModeDefault    SubtitlePlaybackMode = "Default"
	SubtitlePlaybackModeNone       SubtitlePlaybackMode = "None"
	SubtitlePlaybackModeOnlyForced SubtitlePlaybackMode = "OnlyForced"
	SubtitlePlaybackModeSmart      SubtitlePlaybackMode = "Smart"
)

// Defines values for SyncPlayUserAccessType.
const (
	SyncPlayUserAccessTypeCreateAndJoinGroups SyncPlayUserAccessType = "CreateAndJoinGroups"
	SyncPlayUserAccessTypeJoinGroups          SyncPlayUserAccessType = "JoinGroups"
	SyncPlayUserAccessTypeNone                SyncPlayUserAccessType = "None"
)

// Defines values for TranscodeReason.
const (
	AnamorphicVideoNotSupported  TranscodeReason = "AnamorphicVideoNotSupported"
	AudioBitDepthNotSupported    TranscodeReason = "AudioBitDepthNotSupported"
	AudioBitrateNotSupported     TranscodeReason = "AudioBitrateNotSupported"
	AudioChannelsNotSupported    TranscodeReason = "AudioChannelsNotSupported"
	AudioCodecNotSupported       TranscodeReason = "AudioCodecNotSupported"
	AudioIsExternal              TranscodeReason = "AudioIsExternal"
	AudioProfileNotSupported     TranscodeReason = "AudioProfileNotSupported"
	AudioSampleRateNotSupported  TranscodeReason = "AudioSampleRateNotSupported"
	ContainerBitrateExceedsLimit TranscodeReason = "ContainerBitrateExceedsLimit"
	ContainerNotSupported        TranscodeReason = "ContainerNotSupported"
	DirectPlayError              TranscodeReason = "DirectPlayError"
	InterlacedVideoNotSupported  TranscodeReason = "InterlacedVideoNotSupported"
	RefFramesNotSupported        TranscodeReason = "RefFramesNotSupported"
	SecondaryAudioNotSupported   TranscodeReason = "SecondaryAudioNotSupported"
	SubtitleCodecNotSupported    TranscodeReason = "SubtitleCodecNotSupported"
	UnknownAudioStreamInfo       TranscodeReason = "UnknownAudioStreamInfo"
	UnknownVideoStreamInfo       TranscodeReason = "UnknownVideoStreamInfo"
	VideoBitDepthNotSupported    TranscodeReason = "VideoBitDepthNotSupported"
	VideoBitrateNotSupported     TranscodeReason = "VideoBitrateNotSupported"
	VideoCodecNotSupported       TranscodeReason = "VideoCodecNotSupported"
	VideoCodecTagNotSupported    TranscodeReason = "VideoCodecTagNotSupported"
	VideoFramerateNotSupported   TranscodeReason = "VideoFramerateNotSupported"
	VideoLevelNotSupported       TranscodeReason = "VideoLevelNotSupported"
	VideoProfileNotSupported     TranscodeReason = "VideoProfileNotSupported"
	VideoRangeTypeNotSupported   TranscodeReason = "VideoRangeTypeNotSupported"
	VideoResolutionNotSupported  TranscodeReason = "VideoResolutionNotSupported"
)

// Defines values for TranscodeSeekInfo.
const (
	Auto  TranscodeSeekInfo = "Auto"
	Bytes TranscodeSeekInfo = "Bytes"
)

// Defines values for TransportStreamTimestamp.
const (
	TransportStreamTimestampNone  TransportStreamTimestamp = "None"
	TransportStreamTimestampValid TransportStreamTimestamp = "Valid"
	TransportStreamTimestampZero  TransportStreamTimestamp = "Zero"
)

// Defines values for UnratedItem.
const (
	Book           UnratedItem = "Book"
	ChannelContent UnratedItem = "ChannelContent"
	LiveTvChannel  UnratedItem = "LiveTvChannel"
	LiveTvProgram  UnratedItem = "LiveTvProgram"
	Movie          UnratedItem = "Movie"
	Music          UnratedItem = "Music"
	Other          UnratedItem = "Other"
	Series         UnratedItem = "Series"
	Trailer        UnratedItem = "Trailer"
)

// Defines values for Video3DFormat.
const (
	FullSideBySide   Video3DFormat = "FullSideBySide"
	FullTopAndBottom Video3DFormat = "FullTopAndBottom"
	HalfSideBySide   Video3DFormat = "HalfSideBySide"
	HalfTopAndBottom Video3DFormat = "HalfTopAndBottom"
	MVC              Video3DFormat = "MVC"
)

// Defines values for VideoRange.
const (
	VideoRangeHDR     VideoRange = "HDR"
	VideoRangeSDR     VideoRange = "SDR"
	VideoRangeUnknown VideoRange = "Unknown"
)

// Defines values for VideoType.
const (
	VideoTypeBluRay    VideoType = "BluRay"
	VideoTypeDvd       VideoType = "Dvd"
	VideoTypeIso       VideoType = "Iso"
	VideoTypeVideoFile VideoType = "VideoFile"
)

// AccessSchedule An entity representing a user's access schedule.
type AccessSchedule struct {
	// DayOfWeek Gets or sets the day of week.
	DayOfWeek *DynamicDayOfWeek `json:"DayOfWeek,omitempty"`

	// EndHour Gets or sets the end hour.
	EndHour *float64 `json:"EndHour,omitempty"`

	// Id Gets the id of this instance.
	Id *int32 `json:"Id,omitempty"`

	// StartHour Gets or sets the start hour.
	StartHour *float64 `json:"StartHour,omitempty"`

	// UserId Gets the id of the associated user.
	UserId *string `json:"UserId,omitempty"`
}

// AudioSpatialFormat An enum representing formats of spatial audio.
type AudioSpatialFormat string

// AuthenticateUserByName The authenticate user by name request body.
type AuthenticateUserByName struct {
	// Pw Gets or sets the plain text password.
	Pw *string `json:"Pw"`

	// Username Gets or sets the username.
	Username *string `json:"Username"`
}

// AuthenticationResult A class representing an authentication result.
type AuthenticationResult struct {
	// AccessToken Gets or sets the access token.
	AccessToken *string `json:"AccessToken"`

	// ServerId Gets or sets the server id.
	ServerId *string `json:"ServerId"`

	// SessionInfo Gets or sets the session info.
	SessionInfo *SessionInfoDto `json:"SessionInfo"`

	// User Gets or sets the user.
	User *UserDto `json:"User"`
}

// BaseItemDto This is strictly used as a data transfer object from the api layer.
// This holds information about a BaseItem in a format that is convenient for the client.
type BaseItemDto struct {
	// AirDays Gets or sets the air days.
	AirDays *[]DayOfWeek `json:"AirDays"`

	// AirTime Gets or sets the air time.
	AirTime                 *string `json:"AirTime"`
	AirsAfterSeasonNumber   *int32  `json:"AirsAfterSeasonNumber"`
	AirsBeforeEpisodeNumber *int32  `json:"AirsBeforeEpisodeNumber"`
	AirsBeforeSeasonNumber  *int32  `json:"AirsBeforeSeasonNumber"`

	// Album Gets or sets the album.
	Album *string `json:"Album"`

	// AlbumArtist Gets or sets the album artist.
	AlbumArtist *string `json:"AlbumArtist"`

	// AlbumArtists Gets or sets the album artists.
	AlbumArtists *[]NameGuidPair `json:"AlbumArtists"`

	// AlbumCount Gets or sets the album count.
	AlbumCount *int32 `json:"AlbumCount"`

	// AlbumId Gets or sets the album id.
	AlbumId *string `json:"AlbumId"`

	// AlbumPrimaryImageTag Gets or sets the album image tag.
	AlbumPrimaryImageTag *string  `json:"AlbumPrimaryImageTag"`
	Altitude             *float64 `json:"Altitude"`
	Aperture             *float64 `json:"Aperture"`
	ArtistCount          *int32   `json:"ArtistCount"`

	// ArtistItems Gets or sets the artist items.
	ArtistItems *[]NameGuidPair `json:"ArtistItems"`

	// Artists Gets or sets the artists.
	Artists *[]string `json:"Artists"`

	// AspectRatio Gets or sets the aspect ratio.
	AspectRatio *string `json:"AspectRatio"`

	// Audio Gets or sets the audio.
	Audio *ProgramAudio `json:"Audio"`

	// BackdropImageTags Gets or sets the backdrop image tags.
	BackdropImageTags *[]string `json:"BackdropImageTags"`
	CameraMake        *string   `json:"CameraMake"`
	CameraModel       *string   `json:"CameraModel"`
	CanDelete         *bool     `json:"CanDelete"`
	CanDownload       *bool     `json:"CanDownload"`

	// ChannelId Gets or sets the channel identifier.
	ChannelId     *string `json:"ChannelId"`
	ChannelName   *string `json:"ChannelName"`
	ChannelNumber *string `json:"ChannelNumber"`

	// ChannelPrimaryImageTag Gets or sets the channel primary image tag.
	ChannelPrimaryImageTag *string `json:"ChannelPrimaryImageTag"`

	// ChannelType Gets or sets the type of the channel.
	ChannelType *ChannelType `json:"ChannelType"`

	// Chapters Gets or sets the chapters.
	Chapters *[]ChapterInfo `json:"Chapters"`

	// ChildCount Gets or sets the child count.
	ChildCount *int32 `json:"ChildCount"`

	// CollectionType Gets or sets the type of the collection.
	CollectionType *CollectionType `json:"CollectionType"`

	// CommunityRating Gets or sets the community rating.
	CommunityRating *float32 `json:"CommunityRating"`

	// CompletionPercentage Gets or sets the completion percentage.
	CompletionPercentage *float64 `json:"CompletionPercentage"`
	Container            *string  `json:"Container"`

	// CriticRating Gets or sets the critic rating.
	CriticRating *float32 `json:"CriticRating"`

	// CumulativeRunTimeTicks Gets or sets the cumulative run time ticks.
	CumulativeRunTimeTicks *int64 `json:"CumulativeRunTimeTicks"`

	// CurrentProgram Gets or sets the current program.
	CurrentProgram *BaseItemDto `json:"CurrentProgram"`

	// CustomRating Gets or sets the custom rating.
	CustomRating *string `json:"CustomRating"`

	// DateCreated Gets or sets the date created.
	DateCreated        *time.Time `json:"DateCreated"`
	DateLastMediaAdded *time.Time `json:"DateLastMediaAdded"`

	// DisplayOrder Gets or sets the display order.
	DisplayOrder *string `json:"DisplayOrder"`

	// DisplayPreferencesId Gets or sets the display preferences id.
	DisplayPreferencesId     *string `json:"DisplayPreferencesId"`
	EnableMediaSourceDisplay *bool   `json:"EnableMediaSourceDisplay"`

	// EndDate Gets or sets the end date.
	EndDate *time.Time `json:"EndDate"`

	// EpisodeCount Gets or sets the episode count.
	EpisodeCount *int32 `json:"EpisodeCount"`

	// EpisodeTitle Gets or sets the episode title.
	EpisodeTitle *string `json:"EpisodeTitle"`

	// Etag Gets or sets the etag.
	Etag         *string  `json:"Etag"`
	ExposureTime *float64 `json:"ExposureTime"`

	// ExternalUrls Gets or sets the external urls.
	ExternalUrls   *[]ExternalUrl  `json:"ExternalUrls"`
	ExtraType      *ExtraType      `json:"ExtraType"`
	FocalLength    *float64        `json:"FocalLength"`
	ForcedSortName *string         `json:"ForcedSortName"`
	GenreItems     *[]NameGuidPair `json:"GenreItems"`

	// Genres Gets or sets the genres.
	Genres       *[]string `json:"Genres"`
	HasLyrics    *bool     `json:"HasLyrics"`
	HasSubtitles *bool     `json:"HasSubtitles"`
	Height       *int32    `json:"Height"`

	// Id Gets or sets the id.
	Id *string `json:"Id,omitempty"`

	// ImageBlurHashes Gets or sets the blurhashes for the image tags.
	// Maps image type to dictionary mapping image tag to blurhash value.
	ImageBlurHashes *struct {
		Art        *map[string]string `json:"Art,omitempty"`
		Backdrop   *map[string]string `json:"Backdrop,omitempty"`
		Banner     *map[string]string `json:"Banner,omitempty"`
		Box        *map[string]string `json:"Box,omitempty"`
		BoxRear    *map[string]string `json:"BoxRear,omitempty"`
		Chapter    *map[string]string `json:"Chapter,omitempty"`
		Disc       *map[string]string `json:"Disc,omitempty"`
		Logo       *map[string]string `json:"Logo,omitempty"`
		Menu       *map[string]string `json:"Menu,omitempty"`
		Primary    *map[string]string `json:"Primary,omitempty"`
		Profile    *map[string]string `json:"Profile,omitempty"`
		Screenshot *map[string]string `json:"Screenshot,omitempty"`
		Thumb      *map[string]string `json:"Thumb,omitempty"`
	} `json:"ImageBlurHashes"`
	ImageOrientation *ImageOrientation `json:"ImageOrientation"`

	// ImageTags Gets or sets the image tags.
	ImageTags *map[string]string `json:"ImageTags"`

	// IndexNumber Gets or sets the index number.
	IndexNumber *int32 `json:"IndexNumber"`

	// IndexNumberEnd Gets or sets the index number end.
	IndexNumberEnd *int32 `json:"IndexNumberEnd"`

	// IsFolder Gets or sets a value indicating whether this instance is folder.
	IsFolder *bool `json:"IsFolder"`

	// IsHD Gets or sets a value indicating whether this instance is HD.
	IsHD *bool `json:"IsHD"`

	// IsKids Gets or sets a value indicating whether this instance is kids.
	IsKids *bool `json:"IsKids"`

	// IsLive Gets or sets a value indicating whether this instance is live.
	IsLive *bool `json:"IsLive"`

	// IsMovie Gets or sets a value indicating whether this instance is movie.
	IsMovie *bool `json:"IsMovie"`

	// IsNews Gets or sets a value indicating whether this instance is news.
	IsNews *bool `json:"IsNews"`

	// IsPlaceHolder Gets or sets a value indicating whether this instance is place holder.
	IsPlaceHolder *bool `json:"IsPlaceHolder"`

	// IsPremiere Gets or sets a value indicating whether this instance is premiere.
	IsPremiere *bool `json:"IsPremiere"`

	// IsRepeat Gets or sets a value indicating whether this instance is repeat.
	IsRepeat *bool `json:"IsRepeat"`

	// IsSeries Gets or sets a value indicating whether this instance is series.
	IsSeries *bool `json:"IsSeries"`

	// IsSports Gets or sets a value indicating whether this instance is sports.
	IsSports       *bool  `json:"IsSports"`
	IsoSpeedRating *int32 `json:"IsoSpeedRating"`

	// IsoType Gets or sets the type of the iso.
	IsoType  *IsoType `json:"IsoType"`
	Latitude *float64 `json:"Latitude"`

	// LocalTrailerCount Gets or sets the local trailer count.
	LocalTrailerCount *int32 `json:"LocalTrailerCount"`

	// LocationType Gets or sets the type of the location.
	LocationType *LocationType `json:"LocationType"`

	// LockData Gets or sets a value indicating whether [enable internet providers].
	LockData *bool `json:"LockData"`

	// LockedFields Gets or sets the locked fields.
	LockedFields     *[]MetadataField `json:"LockedFields"`
	Longitude        *float64         `json:"Longitude"`
	MediaSourceCount *int32           `json:"MediaSourceCount"`

	// MediaSources Gets or sets the media versions.
	MediaSources *[]MediaSourceInfo `json:"MediaSources"`

	// MediaStreams Gets or sets the media streams.
	MediaStreams *[]MediaStream `json:"MediaStreams"`

	// MediaType Gets or sets the type of the media.
	MediaType *MediaType `json:"MediaType,omitempty"`

	// MovieCount Gets or sets the movie count.
	MovieCount *int32 `json:"MovieCount"`

	// MusicVideoCount Gets or sets the music video count.
	MusicVideoCount *int32 `json:"MusicVideoCount"`

	// Name Gets or sets the name.
	Name *string `json:"Name"`

	// NormalizationGain Gets or sets the gain required for audio normalization.
	NormalizationGain *float32 `json:"NormalizationGain"`

	// Number Gets or sets the number.
	Number *string `json:"Number"`

	// OfficialRating Gets or sets the official rating.
	OfficialRating *string `json:"OfficialRating"`
	OriginalTitle  *string `json:"OriginalTitle"`

	// Overview Gets or sets the overview.
	Overview *string `json:"Overview"`

	// ParentArtImageTag Gets or sets the parent art image tag.
	ParentArtImageTag *string `json:"ParentArtImageTag"`

	// ParentArtItemId Gets or sets whether the item has fan art, this will hold the Id of the Parent that has one.
	ParentArtItemId *string `json:"ParentArtItemId"`

	// ParentBackdropImageTags Gets or sets the parent backdrop image tags.
	ParentBackdropImageTags *[]string `json:"ParentBackdropImageTags"`

	// ParentBackdropItemId Gets or sets whether the item has any backdrops, this will hold the Id of the Parent that has one.
	ParentBackdropItemId *string `json:"ParentBackdropItemId"`

	// ParentId Gets or sets the parent id.
	ParentId *string `json:"ParentId"`

	// ParentIndexNumber Gets or sets the parent index number.
	ParentIndexNumber *int32 `json:"ParentIndexNumber"`

	// ParentLogoImageTag Gets or sets the parent logo image tag.
	ParentLogoImageTag *string `json:"ParentLogoImageTag"`

	// ParentLogoItemId Gets or sets whether the item has a logo, this will hold the Id of the Parent that has one.
	ParentLogoItemId *string `json:"ParentLogoItemId"`

	// ParentPrimaryImageItemId Gets or sets the parent primary image item identifier.
	ParentPrimaryImageItemId *string `json:"ParentPrimaryImageItemId"`

	// ParentPrimaryImageTag Gets or sets the parent primary image tag.
	ParentPrimaryImageTag *string `json:"ParentPrimaryImageTag"`

	// ParentThumbImageTag Gets or sets the parent thumb image tag.
	ParentThumbImageTag *string `json:"ParentThumbImageTag"`

	// ParentThumbItemId Gets or sets the parent thumb item id.
	ParentThumbItemId *string `json:"ParentThumbItemId"`

	// PartCount Gets or sets the part count.
	PartCount *int32 `json:"PartCount"`

	// Path Gets or sets the path.
	Path *string `json:"Path"`

	// People Gets or sets the people.
	People *[]BaseItemPerson `json:"People"`

	// PlayAccess Gets or sets the play access.
	PlayAccess *PlayAccess `json:"PlayAccess"`

	// PlaylistItemId Gets or sets the playlist item identifier.
	PlaylistItemId               *string `json:"PlaylistItemId"`
	PreferredMetadataCountryCode *string `json:"PreferredMetadataCountryCode"`
	PreferredMetadataLanguage    *string `json:"PreferredMetadataLanguage"`

	// PremiereDate Gets or sets the premiere date.
	PremiereDate *time.Time `json:"PremiereDate"`

	// PrimaryImageAspectRatio Gets or sets the primary image aspect ratio, after image enhancements.
	PrimaryImageAspectRatio *float64  `json:"PrimaryImageAspectRatio"`
	ProductionLocations     *[]string `json:"ProductionLocations"`

	// ProductionYear Gets or sets the production year.
	ProductionYear *int32 `json:"ProductionYear"`
	ProgramCount   *int32 `json:"ProgramCount"`

	// ProgramId Gets or sets the program identifier.
	ProgramId *string `json:"ProgramId"`

	// ProviderIds Gets or sets the provider ids.
	ProviderIds *map[string]string `json:"ProviderIds,omitempty,omitzero"`

	// RecursiveItemCount Gets or sets the recursive item count.
	RecursiveItemCount *int32 `json:"RecursiveItemCount"`

	// RemoteTrailers Gets or sets the trailer urls.
	RemoteTrailers *[]MediaUrl `json:"RemoteTrailers"`

	// RunTimeTicks Gets or sets the run time ticks.
	RunTimeTicks *int64 `json:"RunTimeTicks"`

	// ScreenshotImageTags Gets or sets the screenshot image tags.
	ScreenshotImageTags *[]string `json:"ScreenshotImageTags"`

	// SeasonId Gets or sets the season identifier.
	SeasonId *string `json:"SeasonId"`

	// SeasonName Gets or sets the name of the season.
	SeasonName *string `json:"SeasonName"`

	// SeriesCount Gets or sets the series count.
	SeriesCount *int32 `json:"SeriesCount"`

	// SeriesId Gets or sets the series id.
	SeriesId *string `json:"SeriesId"`

	// SeriesName Gets or sets the name of the series.
	SeriesName *string `json:"SeriesName"`

	// SeriesPrimaryImageTag Gets or sets the series primary image tag.
	SeriesPrimaryImageTag *string `json:"SeriesPrimaryImageTag"`

	// SeriesStudio Gets or sets the series studio.
	SeriesStudio *string `json:"SeriesStudio"`

	// SeriesThumbImageTag Gets or sets the series thumb image tag.
	SeriesThumbImageTag *string `json:"SeriesThumbImageTag"`

	// SeriesTimerId Gets or sets the series timer identifier.
	SeriesTimerId *string `json:"SeriesTimerId"`

	// ServerId Gets or sets the server identifier.
	ServerId     *string  `json:"ServerId"`
	ShutterSpeed *float64 `json:"ShutterSpeed"`
	Software     *string  `json:"Software"`

	// SongCount Gets or sets the song count.
	SongCount *int32 `json:"SongCount"`

	// SortName Gets or sets the name of the sort.
	SortName *string `json:"SortName"`

	// SourceType Gets or sets the type of the source.
	SourceType *string `json:"SourceType"`

	// SpecialFeatureCount Gets or sets the special feature count.
	SpecialFeatureCount *int32 `json:"SpecialFeatureCount"`

	// StartDate Gets or sets the start date of the recording, in UTC.
	StartDate *time.Time `json:"StartDate"`

	// Status Gets or sets the status.
	Status *string `json:"Status"`

	// Studios Gets or sets the studios.
	Studios *[]NameGuidPair `json:"Studios"`

	// Taglines Gets or sets the taglines.
	Taglines *[]string `json:"Taglines"`

	// Tags Gets or sets the tags.
	Tags *[]string `json:"Tags"`

	// TimerId Gets or sets the timer identifier.
	TimerId *string `json:"TimerId"`

	// TrailerCount Gets or sets the trailer count.
	TrailerCount *int32 `json:"TrailerCount"`

	// Trickplay Gets or sets the trickplay manifest.
	Trickplay *map[string]map[string]TrickplayInfo `json:"Trickplay"`

	// Type Gets or sets the type.
	Type *BaseItemKind `json:"Type,omitempty"`

	// UserData Gets or sets the user data for this item based on the user it's being requested for.
	UserData *UserItemDataDto `json:"UserData"`

	// Video3DFormat Gets or sets the video3 D format.
	Video3DFormat *Video3DFormat `json:"Video3DFormat"`

	// VideoType Gets or sets the type of the video.
	VideoType *VideoType `json:"VideoType"`
	Width     *int32     `json:"Width"`
}

// BaseItemKind The base item kind.
type BaseItemKind string

// BaseItemPerson This is used by the api to get information about a Person within a BaseItem.
type BaseItemPerson struct {
	// Id Gets or sets the identifier.
	Id *string `json:"Id,omitempty"`

	// ImageBlurHashes Gets or sets the primary image blurhash.
	ImageBlurHashes *struct {
		Art        *map[string]string `json:"Art,omitempty"`
		Backdrop   *map[string]string `json:"Backdrop,omitempty"`
		Banner     *map[string]string `json:"Banner,omitempty"`
		Box        *map[string]string `json:"Box,omitempty"`
		BoxRear    *map[string]string `json:"BoxRear,omitempty"`
		Chapter    *map[string]string `json:"Chapter,omitempty"`
		Disc       *map[string]string `json:"Disc,omitempty"`
		Logo       *map[string]string `json:"Logo,omitempty"`
		Menu       *map[string]string `json:"Menu,omitempty"`
		Primary    *map[string]string `json:"Primary,omitempty"`
		Profile    *map[string]string `json:"Profile,omitempty"`
		Screenshot *map[string]string `json:"Screenshot,omitempty"`
		Thumb      *map[string]string `json:"Thumb,omitempty"`
	} `json:"ImageBlurHashes"`

	// Name Gets or sets the name.
	Name *string `json:"Name"`

	// PrimaryImageTag Gets or sets the primary image tag.
	PrimaryImageTag *string `json:"PrimaryImageTag"`

	// Role Gets or sets the role.
	Role *string `json:"Role"`

	// Type Gets or sets the type.
	Type *PersonKind `json:"Type,omitempty"`
}

// ChannelType Enum ChannelType.
type ChannelType string

// ChapterInfo Class ChapterInfo.
type ChapterInfo struct {
	ImageDateModified *time.Time `json:"ImageDateModified,omitempty"`

	// ImagePath Gets or sets the image path.
	ImagePath *string `json:"ImagePath"`
	ImageTag  *string `json:"ImageTag"`

	// Name Gets or sets the name.
	Name *string `json:"Name"`

	// StartPositionTicks Gets or sets the start position ticks.
	StartPositionTicks *int64 `json:"StartPositionTicks,omitempty"`
}

// ClientCapabilitiesDto Client capabilities dto.
type ClientCapabilitiesDto struct {
	// AppStoreUrl Gets or sets the app store url.
	AppStoreUrl *string `json:"AppStoreUrl"`

	// DeviceProfile Gets or sets the device profile.
	DeviceProfile *DeviceProfile `json:"DeviceProfile"`

	// IconUrl Gets or sets the icon url.
	IconUrl *string `json:"IconUrl"`

	// PlayableMediaTypes Gets or sets the list of playable media types.
	PlayableMediaTypes *[]MediaType `json:"PlayableMediaTypes,omitempty"`

	// SupportedCommands Gets or sets the list of supported commands.
	SupportedCommands *[]GeneralCommandType `json:"SupportedCommands,omitempty"`

	// SupportsMediaControl Gets or sets a value indicating whether session supports media control.
	SupportsMediaControl *bool `json:"SupportsMediaControl,omitempty"`

	// SupportsPersistentIdentifier Gets or sets a value indicating whether session supports a persistent identifier.
	SupportsPersistentIdentifier *bool `json:"SupportsPersistentIdentifier,omitempty"`
}

// CodecProfile Defines the MediaBrowser.Model.Dlna.CodecProfile.
type CodecProfile struct {
	// ApplyConditions Gets or sets the list of MediaBrowser.Model.Dlna.ProfileCondition to apply if this profile is met.
	ApplyConditions *[]ProfileCondition `json:"ApplyConditions,omitempty"`

	// Codec Gets or sets the codec(s) that this profile applies to.
	Codec *string `json:"Codec"`

	// Conditions Gets or sets the list of MediaBrowser.Model.Dlna.ProfileCondition which this profile must meet.
	Conditions *[]ProfileCondition `json:"Conditions,omitempty"`

	// Container Gets or sets the container(s) which this profile will be applied to.
	Container *string `json:"Container"`

	// SubContainer Gets or sets the sub-container(s) which this profile will be applied to.
	SubContainer *string `json:"SubContainer"`

	// Type Gets or sets the MediaBrowser.Model.Dlna.CodecType which this container must meet.
	Type *CodecType `json:"Type,omitempty"`
}

// CodecType defines model for CodecType.
type CodecType string

// CollectionType Collection type.
type CollectionType string

// ContainerProfile Defines the MediaBrowser.Model.Dlna.ContainerProfile.
type ContainerProfile struct {
	// Conditions Gets or sets the list of MediaBrowser.Model.Dlna.ProfileCondition which this container will be applied to.
	Conditions *[]ProfileCondition `json:"Conditions,omitempty"`

	// Container Gets or sets the container(s) which this container must meet.
	Container *string `json:"Container"`

	// SubContainer Gets or sets the sub container(s) which this container must meet.
	SubContainer *string `json:"SubContainer"`

	// Type Gets or sets the MediaBrowser.Model.Dlna.DlnaProfileType which this container must meet.
	Type *DlnaProfileType `json:"Type,omitempty"`
}

// CreateUserByName The create user by name request body.
type CreateUserByName struct {
	// Name Gets or sets the username.
	Name string `json:"Name"`

	// Password Gets or sets the password.
	Password *string `json:"Password"`
}

// DayOfWeek defines model for DayOfWeek.
type DayOfWeek string

// DeviceProfile A MediaBrowser.Model.Dlna.DeviceProfile represents a set of metadata which determines which content a certain device is able to play.
// <br />
// Specifically, it defines the supported <see cref="P:MediaBrowser.Model.Dlna.DeviceProfile.ContainerProfiles">containers</see> and
// <see cref="P:MediaBrowser.Model.Dlna.DeviceProfile.CodecProfiles">codecs</see> (video and/or audio, including codec profiles and levels)
// the device is able to direct play (without transcoding or remuxing),
// as well as which <see cref="P:MediaBrowser.Model.Dlna.DeviceProfile.TranscodingProfiles">containers/codecs to transcode to</see> in case it isn't.
type DeviceProfile struct {
	// CodecProfiles Gets or sets the codec profiles.
	CodecProfiles *[]CodecProfile `json:"CodecProfiles,omitempty"`

	// ContainerProfiles Gets or sets the container profiles. Failing to meet these optional conditions causes transcoding to occur.
	ContainerProfiles *[]ContainerProfile `json:"ContainerProfiles,omitempty"`

	// DirectPlayProfiles Gets or sets the direct play profiles.
	DirectPlayProfiles *[]DirectPlayProfile `json:"DirectPlayProfiles,omitempty"`

	// Id Gets or sets the unique internal identifier.
	Id *string `json:"Id"`

	// MaxStaticBitrate Gets or sets the maximum allowed bitrate for statically streamed content (= direct played files).
	MaxStaticBitrate *int32 `json:"MaxStaticBitrate"`

	// MaxStaticMusicBitrate Gets or sets the maximum allowed bitrate for statically streamed (= direct played) music files.
	MaxStaticMusicBitrate *int32 `json:"MaxStaticMusicBitrate"`

	// MaxStreamingBitrate Gets or sets the maximum allowed bitrate for all streamed content.
	MaxStreamingBitrate *int32 `json:"MaxStreamingBitrate"`

	// MusicStreamingTranscodingBitrate Gets or sets the maximum allowed bitrate for transcoded music streams.
	MusicStreamingTranscodingBitrate *int32 `json:"MusicStreamingTranscodingBitrate"`

	// Name Gets or sets the name of this device profile. User profiles must have a unique name.
	Name *string `json:"Name"`

	// SubtitleProfiles Gets or sets the subtitle profiles.
	SubtitleProfiles *[]SubtitleProfile `json:"SubtitleProfiles,omitempty"`

	// TranscodingProfiles Gets or sets the transcoding profiles.
	TranscodingProfiles *[]TranscodingProfile `json:"TranscodingProfiles,omitempty"`
}

// DirectPlayProfile Defines the MediaBrowser.Model.Dlna.DirectPlayProfile.
type DirectPlayProfile struct {
	// AudioCodec Gets or sets the audio codec.
	AudioCodec *string `json:"AudioCodec"`

	// Container Gets or sets the container.
	Container *string `json:"Container,omitempty"`

	// Type Gets or sets the Dlna profile type.
	Type *DlnaProfileType `json:"Type,omitempty"`

	// VideoCodec Gets or sets the video codec.
	VideoCodec *string `json:"VideoCodec"`
}

// DlnaProfileType defines model for DlnaProfileType.
type DlnaProfileType string

// DynamicDayOfWeek An enum that represents a day of the week, weekdays, weekends, or all days.
type DynamicDayOfWeek string

// EncodingContext defines model for EncodingContext.
type EncodingContext string

// ExternalUrl defines model for ExternalUrl.
type ExternalUrl struct {
	// Name Gets or sets the name.
	Name *string `json:"Name"`

	// Url Gets or sets the type of the item.
	Url *string `json:"Url"`
}

// ExtraType defines model for ExtraType.
type ExtraType string

// ForgotPasswordAction defines model for ForgotPasswordAction.
type ForgotPasswordAction string

// ForgotPasswordDto Forgot Password request body DTO.
type ForgotPasswordDto struct {
	// EnteredUsername Gets or sets the entered username to have its password reset.
	EnteredUsername string `json:"EnteredUsername"`
}

// ForgotPasswordPinDto Forgot Password Pin enter request body DTO.
type ForgotPasswordPinDto struct {
	// Pin Gets or sets the entered pin to have the password reset.
	Pin string `json:"Pin"`
}

// ForgotPasswordResult defines model for ForgotPasswordResult.
type ForgotPasswordResult struct {
	// Action Gets or sets the action.
	Action *ForgotPasswordAction `json:"Action,omitempty"`

	// PinExpirationDate Gets or sets the pin expiration date.
	PinExpirationDate *time.Time `json:"PinExpirationDate"`

	// PinFile Gets or sets the pin file.
	PinFile *string `json:"PinFile"`
}

// GeneralCommandType This exists simply to identify a set of known commands.
type GeneralCommandType string

// HardwareAccelerationType Enum containing hardware acceleration types.
type HardwareAccelerationType string

// ImageOrientation defines model for ImageOrientation.
type ImageOrientation string

// IsoType Enum IsoType.
type IsoType string

// LocationType Enum LocationType.
type LocationType string

// MediaAttachment Class MediaAttachment.
type MediaAttachment struct {
	// Codec Gets or sets the codec.
	Codec *string `json:"Codec"`

	// CodecTag Gets or sets the codec tag.
	CodecTag *string `json:"CodecTag"`

	// Comment Gets or sets the comment.
	Comment *string `json:"Comment"`

	// DeliveryUrl Gets or sets the delivery URL.
	DeliveryUrl *string `json:"DeliveryUrl"`

	// FileName Gets or sets the filename.
	FileName *string `json:"FileName"`

	// Index Gets or sets the index.
	Index *int32 `json:"Index,omitempty"`

	// MimeType Gets or sets the MIME type.
	MimeType *string `json:"MimeType"`
}

// MediaProtocol defines model for MediaProtocol.
type MediaProtocol string

// MediaSourceInfo defines model for MediaSourceInfo.
type MediaSourceInfo struct {
	AnalyzeDurationMs           *int32         `json:"AnalyzeDurationMs"`
	Bitrate                     *int32         `json:"Bitrate"`
	BufferMs                    *int32         `json:"BufferMs"`
	Container                   *string        `json:"Container"`
	DefaultAudioStreamIndex     *int32         `json:"DefaultAudioStreamIndex"`
	DefaultSubtitleStreamIndex  *int32         `json:"DefaultSubtitleStreamIndex"`
	ETag                        *string        `json:"ETag"`
	EncoderPath                 *string        `json:"EncoderPath"`
	EncoderProtocol             *MediaProtocol `json:"EncoderProtocol"`
	FallbackMaxStreamingBitrate *int32         `json:"FallbackMaxStreamingBitrate"`
	Formats                     *[]string      `json:"Formats"`
	GenPtsInput                 *bool          `json:"GenPtsInput,omitempty"`
	HasSegments                 *bool          `json:"HasSegments,omitempty"`
	Id                          *string        `json:"Id"`
	IgnoreDts                   *bool          `json:"IgnoreDts,omitempty"`
	IgnoreIndex                 *bool          `json:"IgnoreIndex,omitempty"`
	IsInfiniteStream            *bool          `json:"IsInfiniteStream,omitempty"`

	// IsRemote Gets or sets a value indicating whether the media is remote.
	// Differentiate internet url vs local network.
	IsRemote              *bool                     `json:"IsRemote,omitempty"`
	IsoType               *IsoType                  `json:"IsoType"`
	LiveStreamId          *string                   `json:"LiveStreamId"`
	MediaAttachments      *[]MediaAttachment        `json:"MediaAttachments"`
	MediaStreams          *[]MediaStream            `json:"MediaStreams"`
	Name                  *string                   `json:"Name"`
	OpenToken             *string                   `json:"OpenToken"`
	Path                  *string                   `json:"Path"`
	Protocol              *MediaProtocol            `json:"Protocol,omitempty"`
	ReadAtNativeFramerate *bool                     `json:"ReadAtNativeFramerate,omitempty"`
	RequiredHttpHeaders   *map[string]*string       `json:"RequiredHttpHeaders"`
	RequiresClosing       *bool                     `json:"RequiresClosing,omitempty"`
	RequiresLooping       *bool                     `json:"RequiresLooping,omitempty"`
	RequiresOpening       *bool                     `json:"RequiresOpening,omitempty"`
	RunTimeTicks          *int64                    `json:"RunTimeTicks"`
	Size                  *int64                    `json:"Size"`
	SupportsDirectPlay    *bool                     `json:"SupportsDirectPlay,omitempty"`
	SupportsDirectStream  *bool                     `json:"SupportsDirectStream,omitempty"`
	SupportsProbing       *bool                     `json:"SupportsProbing,omitempty"`
	SupportsTranscoding   *bool                     `json:"SupportsTranscoding,omitempty"`
	Timestamp             *TransportStreamTimestamp `json:"Timestamp"`
	TranscodingContainer  *string                   `json:"TranscodingContainer"`

	// TranscodingSubProtocol Media streaming protocol.
	// Lowercase for backwards compatibility.
	TranscodingSubProtocol              *MediaStreamProtocol `json:"TranscodingSubProtocol,omitempty"`
	TranscodingUrl                      *string              `json:"TranscodingUrl"`
	Type                                *MediaSourceType     `json:"Type,omitempty"`
	UseMostCompatibleTranscodingProfile *bool                `json:"UseMostCompatibleTranscodingProfile,omitempty"`
	Video3DFormat                       *Video3DFormat       `json:"Video3DFormat"`
	VideoType                           *VideoType           `json:"VideoType"`
}

// MediaSourceType defines model for MediaSourceType.
type MediaSourceType string

// MediaStream Class MediaStream.
type MediaStream struct {
	// AspectRatio Gets or sets the aspect ratio.
	AspectRatio *string `json:"AspectRatio"`

	// AudioSpatialFormat Gets the audio spatial format.
	AudioSpatialFormat *AudioSpatialFormat `json:"AudioSpatialFormat,omitempty"`

	// AverageFrameRate Gets or sets the average frame rate.
	AverageFrameRate *float32 `json:"AverageFrameRate"`

	// BitDepth Gets or sets the bit depth.
	BitDepth *int32 `json:"BitDepth"`

	// BitRate Gets or sets the bit rate.
	BitRate *int32 `json:"BitRate"`

	// BlPresentFlag Gets or sets the Dolby Vision bl present flag.
	BlPresentFlag *int32 `json:"BlPresentFlag"`

	// ChannelLayout Gets or sets the channel layout.
	ChannelLayout *string `json:"ChannelLayout"`

	// Channels Gets or sets the channels.
	Channels *int32 `json:"Channels"`

	// Codec Gets or sets the codec.
	Codec *string `json:"Codec"`

	// CodecTag Gets or sets the codec tag.
	CodecTag *string `json:"CodecTag"`

	// CodecTimeBase Gets or sets the codec time base.
	CodecTimeBase *string `json:"CodecTimeBase"`

	// ColorPrimaries Gets or sets the color primaries.
	ColorPrimaries *string `json:"ColorPrimaries"`

	// ColorRange Gets or sets the color range.
	ColorRange *string `json:"ColorRange"`

	// ColorSpace Gets or sets the color space.
	ColorSpace *string `json:"ColorSpace"`

	// ColorTransfer Gets or sets the color transfer.
	ColorTransfer *string `json:"ColorTransfer"`

	// Comment Gets or sets the comment.
	Comment *string `json:"Comment"`

	// DeliveryMethod Gets or sets the method.
	DeliveryMethod *SubtitleDeliveryMethod `json:"DeliveryMethod"`

	// DeliveryUrl Gets or sets the delivery URL.
	DeliveryUrl  *string `json:"DeliveryUrl"`
	DisplayTitle *string `json:"DisplayTitle"`

	// DvBlSignalCompatibilityId Gets or sets the Dolby Vision bl signal compatibility id.
	DvBlSignalCompatibilityId *int32 `json:"DvBlSignalCompatibilityId"`

	// DvLevel Gets or sets the Dolby Vision level.
	DvLevel *int32 `json:"DvLevel"`

	// DvProfile Gets or sets the Dolby Vision profile.
	DvProfile *int32 `json:"DvProfile"`

	// DvVersionMajor Gets or sets the Dolby Vision version major.
	DvVersionMajor *int32 `json:"DvVersionMajor"`

	// DvVersionMinor Gets or sets the Dolby Vision version minor.
	DvVersionMinor *int32 `json:"DvVersionMinor"`

	// ElPresentFlag Gets or sets the Dolby Vision el present flag.
	ElPresentFlag *int32 `json:"ElPresentFlag"`

	// Height Gets or sets the height.
	Height *int32 `json:"Height"`

	// Index Gets or sets the index.
	Index *int32 `json:"Index,omitempty"`
	IsAVC *bool  `json:"IsAVC"`

	// IsAnamorphic Gets or sets whether this instance is anamorphic.
	IsAnamorphic *bool `json:"IsAnamorphic"`

	// IsDefault Gets or sets a value indicating whether this instance is default.
	IsDefault *bool `json:"IsDefault,omitempty"`

	// IsExternal Gets or sets a value indicating whether this instance is external.
	IsExternal *bool `json:"IsExternal,omitempty"`

	// IsExternalUrl Gets or sets a value indicating whether this instance is external URL.
	IsExternalUrl *bool `json:"IsExternalUrl"`

	// IsForced Gets or sets a value indicating whether this instance is forced.
	IsForced *bool `json:"IsForced,omitempty"`

	// IsHearingImpaired Gets or sets a value indicating whether this instance is for the hearing impaired.
	IsHearingImpaired *bool `json:"IsHearingImpaired,omitempty"`

	// IsInterlaced Gets or sets a value indicating whether this instance is interlaced.
	IsInterlaced         *bool `json:"IsInterlaced,omitempty"`
	IsTextSubtitleStream *bool `json:"IsTextSubtitleStream,omitempty"`

	// Language Gets or sets the language.
	Language *string `json:"Language"`

	// Level Gets or sets the level.
	Level                    *float64 `json:"Level"`
	LocalizedDefault         *string  `json:"LocalizedDefault"`
	LocalizedExternal        *string  `json:"LocalizedExternal"`
	LocalizedForced          *string  `json:"LocalizedForced"`
	LocalizedHearingImpaired *string  `json:"LocalizedHearingImpaired"`
	LocalizedUndefined       *string  `json:"LocalizedUndefined"`
	NalLengthSize            *string  `json:"NalLengthSize"`

	// PacketLength Gets or sets the length of the packet.
	PacketLength *int32 `json:"PacketLength"`

	// Path Gets or sets the filename.
	Path *string `json:"Path"`

	// PixelFormat Gets or sets the pixel format.
	PixelFormat *string `json:"PixelFormat"`

	// Profile Gets or sets the profile.
	Profile *string `json:"Profile"`

	// RealFrameRate Gets or sets the real frame rate.
	RealFrameRate *float32 `json:"RealFrameRate"`

	// RefFrames Gets or sets the reference frames.
	RefFrames *int32 `json:"RefFrames"`

	// ReferenceFrameRate Gets the framerate used as reference.
	// Prefer AverageFrameRate, if that is null or an unrealistic value
	// then fallback to RealFrameRate.
	ReferenceFrameRate *float32 `json:"ReferenceFrameRate"`

	// Rotation Gets or sets the Rotation in degrees.
	Rotation *int32 `json:"Rotation"`

	// RpuPresentFlag Gets or sets the Dolby Vision rpu present flag.
	RpuPresentFlag *int32 `json:"RpuPresentFlag"`

	// SampleRate Gets or sets the sample rate.
	SampleRate *int32 `json:"SampleRate"`

	// Score Gets or sets the score.
	Score *int32 `json:"Score"`

	// SupportsExternalStream Gets or sets a value indicating whether [supports external stream].
	SupportsExternalStream *bool `json:"SupportsExternalStream,omitempty"`

	// TimeBase Gets or sets the time base.
	TimeBase *string `json:"TimeBase"`

	// Title Gets or sets the title.
	Title *string `json:"Title"`

	// Type Gets or sets the type.
	Type *MediaStreamType `json:"Type,omitempty"`

	// VideoDoViTitle Gets the video dovi title.
	VideoDoViTitle *string `json:"VideoDoViTitle"`

	// VideoRange Gets the video range.
	VideoRange *VideoRange `json:"VideoRange,omitempty"`

	// VideoRangeType Gets the video range type.
	VideoRangeType *MediaStreamVideoRangeType `json:"VideoRangeType,omitempty"`

	// Width Gets or sets the width.
	Width *int32 `json:"Width"`
}

// MediaStreamVideoRangeType Gets the video range type.
type MediaStreamVideoRangeType string

// MediaStreamProtocol Media streaming protocol.
// Lowercase for backwards compatibility.
type MediaStreamProtocol string

// MediaStreamType Enum MediaStreamType.
type MediaStreamType string

// MediaType Media types.
type MediaType string

// MediaUrl defines model for MediaUrl.
type MediaUrl struct {
	Name *string `json:"Name"`
	Url  *string `json:"Url"`
}

// MetadataField Enum MetadataFields.
type MetadataField string

// NameGuidPair defines model for NameGuidPair.
type NameGuidPair struct {
	Id   *string `json:"Id,omitempty"`
	Name *string `json:"Name"`
}

// PersonKind The person kind.
type PersonKind string

// PinRedeemResult defines model for PinRedeemResult.
type PinRedeemResult struct {
	// Success Gets or sets a value indicating whether this MediaBrowser.Model.Users.PinRedeemResult is success.
	Success *bool `json:"Success,omitempty"`

	// UsersReset Gets or sets the users reset.
	UsersReset *[]string `json:"UsersReset,omitempty"`
}

// PlayAccess defines model for PlayAccess.
type PlayAccess string

// PlayMethod defines model for PlayMethod.
type PlayMethod string

// PlaybackOrder Enum PlaybackOrder.
type PlaybackOrder string

// PlayerStateInfo defines model for PlayerStateInfo.
type PlayerStateInfo struct {
	// AudioStreamIndex Gets or sets the index of the now playing audio stream.
	AudioStreamIndex *int32 `json:"AudioStreamIndex"`

	// CanSeek Gets or sets a value indicating whether this instance can seek.
	CanSeek *bool `json:"CanSeek,omitempty"`

	// IsMuted Gets or sets a value indicating whether this instance is muted.
	IsMuted *bool `json:"IsMuted,omitempty"`

	// IsPaused Gets or sets a value indicating whether this instance is paused.
	IsPaused *bool `json:"IsPaused,omitempty"`

	// LiveStreamId Gets or sets the now playing live stream identifier.
	LiveStreamId *string `json:"LiveStreamId"`

	// MediaSourceId Gets or sets the now playing media version identifier.
	MediaSourceId *string `json:"MediaSourceId"`

	// PlayMethod Gets or sets the play method.
	PlayMethod *PlayMethod `json:"PlayMethod"`

	// PlaybackOrder Gets or sets the playback order.
	PlaybackOrder *PlaybackOrder `json:"PlaybackOrder,omitempty"`

	// PositionTicks Gets or sets the now playing position ticks.
	PositionTicks *int64 `json:"PositionTicks"`

	// RepeatMode Gets or sets the repeat mode.
	RepeatMode *RepeatMode `json:"RepeatMode,omitempty"`

	// SubtitleStreamIndex Gets or sets the index of the now playing subtitle stream.
	SubtitleStreamIndex *int32 `json:"SubtitleStreamIndex"`

	// VolumeLevel Gets or sets the volume level.
	VolumeLevel *int32 `json:"VolumeLevel"`
}

// ProblemDetails defines model for ProblemDetails.
type ProblemDetails struct {
	Detail               *string                `json:"detail"`
	Instance             *string                `json:"instance"`
	Status               *int32                 `json:"status"`
	Title                *string                `json:"title"`
	Type                 *string                `json:"type"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// ProfileCondition defines model for ProfileCondition.
type ProfileCondition struct {
	Condition  *ProfileConditionType  `json:"Condition,omitempty"`
	IsRequired *bool                  `json:"IsRequired,omitempty"`
	Property   *ProfileConditionValue `json:"Property,omitempty"`
	Value      *string                `json:"Value"`
}

// ProfileConditionType defines model for ProfileConditionType.
type ProfileConditionType string

// ProfileConditionValue defines model for ProfileConditionValue.
type ProfileConditionValue string

// ProgramAudio defines model for ProgramAudio.
type ProgramAudio string

// QueueItem defines model for QueueItem.
type QueueItem struct {
	Id             *string `json:"Id,omitempty"`
	PlaylistItemId *string `json:"PlaylistItemId"`
}

// QuickConnectDto The quick connect request body.
type QuickConnectDto struct {
	// Secret Gets or sets the quick connect secret.
	Secret string `json:"Secret"`
}

// RemoteSearchResult defines model for RemoteSearchResult.
type RemoteSearchResult struct {
	AlbumArtist    *RemoteSearchResult   `json:"AlbumArtist"`
	Artists        *[]RemoteSearchResult `json:"Artists"`
	ImageUrl       *string               `json:"ImageUrl"`
	IndexNumber    *int32                `json:"IndexNumber"`
	IndexNumberEnd *int32                `json:"IndexNumberEnd"`

	// Name Gets or sets the name.
	Name              *string    `json:"Name"`
	Overview          *string    `json:"Overview"`
	ParentIndexNumber *int32     `json:"ParentIndexNumber"`
	PremiereDate      *time.Time `json:"PremiereDate"`

	// ProductionYear Gets or sets the year.
	ProductionYear *int32 `json:"ProductionYear"`

	// ProviderIds Gets or sets the provider ids.
	ProviderIds        *map[string]*string `json:"ProviderIds"`
	SearchProviderName *string             `json:"SearchProviderName"`
}

// RepeatMode defines model for RepeatMode.
type RepeatMode string

// SessionInfoDto Session info DTO.
type SessionInfoDto struct {
	// AdditionalUsers Gets or sets the additional users.
	AdditionalUsers *[]SessionUserInfo `json:"AdditionalUsers"`

	// ApplicationVersion Gets or sets the application version.
	ApplicationVersion *string `json:"ApplicationVersion"`

	// Capabilities Gets or sets the client capabilities.
	Capabilities *ClientCapabilitiesDto `json:"Capabilities"`

	// Client Gets or sets the type of the client.
	Client *string `json:"Client"`

	// DeviceId Gets or sets the device id.
	DeviceId *string `json:"DeviceId"`

	// DeviceName Gets or sets the name of the device.
	DeviceName *string `json:"DeviceName"`

	// DeviceType Gets or sets the type of the device.
	DeviceType *string `json:"DeviceType"`

	// HasCustomDeviceName Gets or sets a value indicating whether the session has a custom device name.
	HasCustomDeviceName *bool `json:"HasCustomDeviceName,omitempty"`

	// Id Gets or sets the id.
	Id *string `json:"Id"`

	// IsActive Gets or sets a value indicating whether this session is active.
	IsActive *bool `json:"IsActive,omitempty"`

	// LastActivityDate Gets or sets the last activity date.
	LastActivityDate *time.Time `json:"LastActivityDate,omitempty"`

	// LastPausedDate Gets or sets the last paused date.
	LastPausedDate *time.Time `json:"LastPausedDate"`

	// LastPlaybackCheckIn Gets or sets the last playback check in.
	LastPlaybackCheckIn *time.Time `json:"LastPlaybackCheckIn,omitempty"`

	// NowPlayingItem Gets or sets the now playing item.
	NowPlayingItem *BaseItemDto `json:"NowPlayingItem"`

	// NowPlayingQueue Gets or sets the now playing queue.
	NowPlayingQueue *[]QueueItem `json:"NowPlayingQueue"`

	// NowPlayingQueueFullItems Gets or sets the now playing queue full items.
	NowPlayingQueueFullItems *[]BaseItemDto `json:"NowPlayingQueueFullItems"`

	// NowViewingItem Gets or sets the now viewing item.
	NowViewingItem *BaseItemDto `json:"NowViewingItem"`

	// PlayState Gets or sets the play state.
	PlayState *PlayerStateInfo `json:"PlayState"`

	// PlayableMediaTypes Gets or sets the playable media types.
	PlayableMediaTypes *[]MediaType `json:"PlayableMediaTypes,omitempty"`

	// PlaylistItemId Gets or sets the playlist item id.
	PlaylistItemId *string `json:"PlaylistItemId"`

	// RemoteEndPoint Gets or sets the remote end point.
	RemoteEndPoint *string `json:"RemoteEndPoint"`

	// ServerId Gets or sets the server id.
	ServerId *string `json:"ServerId"`

	// SupportedCommands Gets or sets the supported commands.
	SupportedCommands *[]GeneralCommandType `json:"SupportedCommands,omitempty"`

	// SupportsMediaControl Gets or sets a value indicating whether the session supports media control.
	SupportsMediaControl *bool `json:"SupportsMediaControl,omitempty"`

	// SupportsRemoteControl Gets or sets a value indicating whether the session supports remote control.
	SupportsRemoteControl *bool `json:"SupportsRemoteControl,omitempty"`

	// TranscodingInfo Gets or sets the transcoding info.
	TranscodingInfo *TranscodingInfo `json:"TranscodingInfo"`

	// UserId Gets or sets the user id.
	UserId *string `json:"UserId,omitempty"`

	// UserName Gets or sets the username.
	UserName *string `json:"UserName"`

	// UserPrimaryImageTag Gets or sets the user primary image tag.
	UserPrimaryImageTag *string `json:"UserPrimaryImageTag"`
}

// SessionUserInfo Class SessionUserInfo.
type SessionUserInfo struct {
	// UserId Gets or sets the user identifier.
	UserId *string `json:"UserId,omitempty"`

	// UserName Gets or sets the name of the user.
	UserName *string `json:"UserName"`
}

// SubtitleDeliveryMethod Delivery method to use during playback of a specific subtitle format.
type SubtitleDeliveryMethod string

// SubtitlePlaybackMode An enum representing a subtitle playback mode.
type SubtitlePlaybackMode string

// SubtitleProfile A class for subtitle profile information.
type SubtitleProfile struct {
	// Container Gets or sets the container.
	Container *string `json:"Container"`

	// DidlMode Gets or sets the DIDL mode.
	DidlMode *string `json:"DidlMode"`

	// Format Gets or sets the format.
	Format *string `json:"Format"`

	// Language Gets or sets the language.
	Language *string `json:"Language"`

	// Method Gets or sets the delivery method.
	Method *SubtitleDeliveryMethod `json:"Method,omitempty"`
}

// SyncPlayUserAccessType Enum SyncPlayUserAccessType.
type SyncPlayUserAccessType string

// TranscodeReason defines model for TranscodeReason.
type TranscodeReason string

// TranscodeSeekInfo defines model for TranscodeSeekInfo.
type TranscodeSeekInfo string

// TranscodingInfo Class holding information on a runnning transcode.
type TranscodingInfo struct {
	// AudioChannels Gets or sets the audio channels.
	AudioChannels *int32 `json:"AudioChannels"`

	// AudioCodec Gets or sets the thread count used for encoding.
	AudioCodec *string `json:"AudioCodec"`

	// Bitrate Gets or sets the bitrate.
	Bitrate *int32 `json:"Bitrate"`

	// CompletionPercentage Gets or sets the completion percentage.
	CompletionPercentage *float64 `json:"CompletionPercentage"`

	// Container Gets or sets the thread count used for encoding.
	Container *string `json:"Container"`

	// Framerate Gets or sets the framerate.
	Framerate *float32 `json:"Framerate"`

	// HardwareAccelerationType Gets or sets the hardware acceleration type.
	HardwareAccelerationType *HardwareAccelerationType `json:"HardwareAccelerationType"`

	// Height Gets or sets the video height.
	Height *int32 `json:"Height"`

	// IsAudioDirect Gets or sets a value indicating whether the audio is passed through.
	IsAudioDirect *bool `json:"IsAudioDirect,omitempty"`

	// IsVideoDirect Gets or sets a value indicating whether the video is passed through.
	IsVideoDirect *bool `json:"IsVideoDirect,omitempty"`

	// TranscodeReasons Gets or sets the transcode reasons.
	TranscodeReasons *[]TranscodeReason `json:"TranscodeReasons,omitempty"`

	// VideoCodec Gets or sets the thread count used for encoding.
	VideoCodec *string `json:"VideoCodec"`

	// Width Gets or sets the video width.
	Width *int32 `json:"Width"`
}

// TranscodingProfile A class for transcoding profile information.
// Note for client developers: Conditions defined in MediaBrowser.Model.Dlna.CodecProfile has higher priority and can override values defined here.
type TranscodingProfile struct {
	// AudioCodec Gets or sets the audio codec.
	AudioCodec *string `json:"AudioCodec,omitempty"`

	// BreakOnNonKeyFrames Gets or sets a value indicating whether breaking the video stream on non-keyframes is supported.
	BreakOnNonKeyFrames *bool `json:"BreakOnNonKeyFrames,omitempty"`

	// Conditions Gets or sets the profile conditions.
	Conditions *[]ProfileCondition `json:"Conditions,omitempty"`

	// Container Gets or sets the container.
	Container *string `json:"Container,omitempty"`

	// Context Gets or sets the encoding context.
	Context *EncodingContext `json:"Context,omitempty"`

	// CopyTimestamps Gets or sets a value indicating whether timestamps should be copied.
	CopyTimestamps *bool `json:"CopyTimestamps,omitempty"`

	// EnableAudioVbrEncoding Gets or sets a value indicating whether variable bitrate encoding is supported.
	EnableAudioVbrEncoding *bool `json:"EnableAudioVbrEncoding,omitempty"`

	// EnableMpegtsM2TsMode Gets or sets a value indicating whether M2TS mode is enabled.
	EnableMpegtsM2TsMode *bool `json:"EnableMpegtsM2TsMode,omitempty"`

	// EnableSubtitlesInManifest Gets or sets a value indicating whether subtitles are allowed in the manifest.
	EnableSubtitlesInManifest *bool `json:"EnableSubtitlesInManifest,omitempty"`

	// EstimateContentLength Gets or sets a value indicating whether the content length should be estimated.
	EstimateContentLength *bool `json:"EstimateContentLength,omitempty"`

	// MaxAudioChannels Gets or sets the maximum audio channels.
	MaxAudioChannels *string `json:"MaxAudioChannels"`

	// MinSegments Gets or sets the minimum amount of segments.
	MinSegments *int32 `json:"MinSegments,omitempty"`

	// Protocol Gets or sets the protocol.
	Protocol *MediaStreamProtocol `json:"Protocol,omitempty"`

	// SegmentLength Gets or sets the segment length.
	SegmentLength *int32 `json:"SegmentLength,omitempty"`

	// TranscodeSeekInfo Gets or sets the transcoding seek info mode.
	TranscodeSeekInfo *TranscodeSeekInfo `json:"TranscodeSeekInfo,omitempty"`

	// Type Gets or sets the DLNA profile type.
	Type *DlnaProfileType `json:"Type,omitempty"`

	// VideoCodec Gets or sets the video codec.
	VideoCodec *string `json:"VideoCodec,omitempty"`
}

// TransportStreamTimestamp defines model for TransportStreamTimestamp.
type TransportStreamTimestamp string

// TrickplayInfo An entity representing the metadata for a group of trickplay tiles.
type TrickplayInfo struct {
	// Bandwidth Gets or sets peak bandwith usage in bits per second.
	Bandwidth *int32 `json:"Bandwidth,omitempty"`

	// Height Gets or sets height of an individual thumbnail.
	Height *int32 `json:"Height,omitempty"`

	// Interval Gets or sets interval in milliseconds between each trickplay thumbnail.
	Interval *int32 `json:"Interval,omitempty"`

	// ThumbnailCount Gets or sets total amount of non-black thumbnails.
	ThumbnailCount *int32 `json:"ThumbnailCount,omitempty"`

	// TileHeight Gets or sets amount of thumbnails per column.
	TileHeight *int32 `json:"TileHeight,omitempty"`

	// TileWidth Gets or sets amount of thumbnails per row.
	TileWidth *int32 `json:"TileWidth,omitempty"`

	// Width Gets or sets width of an individual thumbnail.
	Width *int32 `json:"Width,omitempty"`
}

// UnratedItem An enum representing an unrated item.
type UnratedItem string

// UpdateUserPassword The update user password request body.
type UpdateUserPassword struct {
	// CurrentPassword Gets or sets the current sha1-hashed password.
	CurrentPassword *string `json:"CurrentPassword"`

	// CurrentPw Gets or sets the current plain text password.
	CurrentPw *string `json:"CurrentPw"`

	// NewPw Gets or sets the new plain text password.
	NewPw *string `json:"NewPw"`

	// ResetPassword Gets or sets a value indicating whether to reset the password.
	ResetPassword *bool `json:"ResetPassword,omitempty"`
}

// UserConfiguration Class UserConfiguration.
type UserConfiguration struct {
	// AudioLanguagePreference Gets or sets the audio language preference.
	AudioLanguagePreference *string `json:"AudioLanguagePreference"`

	// CastReceiverId Gets or sets the id of the selected cast receiver.
	CastReceiverId            *string   `json:"CastReceiverId"`
	DisplayCollectionsView    *bool     `json:"DisplayCollectionsView,omitempty"`
	DisplayMissingEpisodes    *bool     `json:"DisplayMissingEpisodes,omitempty"`
	EnableLocalPassword       *bool     `json:"EnableLocalPassword,omitempty"`
	EnableNextEpisodeAutoPlay *bool     `json:"EnableNextEpisodeAutoPlay,omitempty"`
	GroupedFolders            *[]string `json:"GroupedFolders,omitempty"`
	HidePlayedInLatest        *bool     `json:"HidePlayedInLatest,omitempty"`
	LatestItemsExcludes       *[]string `json:"LatestItemsExcludes,omitempty"`
	MyMediaExcludes           *[]string `json:"MyMediaExcludes,omitempty"`
	OrderedViews              *[]string `json:"OrderedViews,omitempty"`

	// PlayDefaultAudioTrack Gets or sets a value indicating whether [play default audio track].
	PlayDefaultAudioTrack      *bool `json:"PlayDefaultAudioTrack,omitempty"`
	RememberAudioSelections    *bool `json:"RememberAudioSelections,omitempty"`
	RememberSubtitleSelections *bool `json:"RememberSubtitleSelections,omitempty"`

	// SubtitleLanguagePreference Gets or sets the subtitle language preference.
	SubtitleLanguagePreference *string `json:"SubtitleLanguagePreference"`

	// SubtitleMode An enum representing a subtitle playback mode.
	SubtitleMode *SubtitlePlaybackMode `json:"SubtitleMode,omitempty"`
}

// UserDto Class UserDto.
type UserDto struct {
	// Configuration Gets or sets the configuration.
	Configuration *UserConfiguration `json:"Configuration"`

	// EnableAutoLogin Gets or sets whether async login is enabled or not.
	EnableAutoLogin *bool `json:"EnableAutoLogin"`

	// HasConfiguredEasyPassword Gets or sets a value indicating whether this instance has configured easy password.
	// Deprecated:
	HasConfiguredEasyPassword *bool `json:"HasConfiguredEasyPassword,omitempty"`

	// HasConfiguredPassword Gets or sets a value indicating whether this instance has configured password.
	HasConfiguredPassword *bool `json:"HasConfiguredPassword,omitempty"`

	// HasPassword Gets or sets a value indicating whether this instance has password.
	HasPassword *bool `json:"HasPassword,omitempty"`

	// Id Gets or sets the id.
	Id *string `json:"Id,omitempty"`

	// LastActivityDate Gets or sets the last activity date.
	LastActivityDate *time.Time `json:"LastActivityDate"`

	// LastLoginDate Gets or sets the last login date.
	LastLoginDate *time.Time `json:"LastLoginDate"`

	// Name Gets or sets the name.
	Name *string `json:"Name"`

	// Policy Gets or sets the policy.
	Policy *UserPolicy `json:"Policy"`

	// PrimaryImageAspectRatio Gets or sets the primary image aspect ratio.
	PrimaryImageAspectRatio *float64 `json:"PrimaryImageAspectRatio"`

	// PrimaryImageTag Gets or sets the primary image tag.
	PrimaryImageTag *string `json:"PrimaryImageTag"`

	// ServerId Gets or sets the server identifier.
	ServerId *string `json:"ServerId"`

	// ServerName Gets or sets the name of the server.
	// This is not used by the server and is for client-side usage only.
	ServerName *string `json:"ServerName"`
}

// UserItemDataDto Class UserItemDataDto.
type UserItemDataDto struct {
	// IsFavorite Gets or sets a value indicating whether this instance is favorite.
	IsFavorite *bool `json:"IsFavorite,omitempty"`

	// ItemId Gets or sets the item identifier.
	ItemId *string `json:"ItemId,omitempty"`

	// Key Gets or sets the key.
	Key *string `json:"Key,omitempty"`

	// LastPlayedDate Gets or sets the last played date.
	LastPlayedDate *time.Time `json:"LastPlayedDate"`

	// Likes Gets or sets a value indicating whether this MediaBrowser.Model.Dto.UserItemDataDto is likes.
	Likes *bool `json:"Likes"`

	// PlayCount Gets or sets the play count.
	PlayCount *int32 `json:"PlayCount,omitempty"`

	// PlaybackPositionTicks Gets or sets the playback position ticks.
	PlaybackPositionTicks *int64 `json:"PlaybackPositionTicks,omitempty"`

	// Played Gets or sets a value indicating whether this MediaBrowser.Model.Dto.UserItemDataDto is played.
	Played *bool `json:"Played,omitempty"`

	// PlayedPercentage Gets or sets the played percentage.
	PlayedPercentage *float64 `json:"PlayedPercentage"`

	// Rating Gets or sets the rating.
	Rating *float64 `json:"Rating"`

	// UnplayedItemCount Gets or sets the unplayed item count.
	UnplayedItemCount *int32 `json:"UnplayedItemCount"`
}

// UserPolicy defines model for UserPolicy.
type UserPolicy struct {
	AccessSchedules                *[]AccessSchedule `json:"AccessSchedules"`
	AllowedTags                    *[]string         `json:"AllowedTags"`
	AuthenticationProviderId       string            `json:"AuthenticationProviderId"`
	BlockUnratedItems              *[]UnratedItem    `json:"BlockUnratedItems"`
	BlockedChannels                *[]string         `json:"BlockedChannels"`
	BlockedMediaFolders            *[]string         `json:"BlockedMediaFolders"`
	BlockedTags                    *[]string         `json:"BlockedTags"`
	EnableAllChannels              *bool             `json:"EnableAllChannels,omitempty"`
	EnableAllDevices               *bool             `json:"EnableAllDevices,omitempty"`
	EnableAllFolders               *bool             `json:"EnableAllFolders,omitempty"`
	EnableAudioPlaybackTranscoding *bool             `json:"EnableAudioPlaybackTranscoding,omitempty"`

	// EnableCollectionManagement Gets or sets a value indicating whether this instance can manage collections.
	EnableCollectionManagement       *bool     `json:"EnableCollectionManagement,omitempty"`
	EnableContentDeletion            *bool     `json:"EnableContentDeletion,omitempty"`
	EnableContentDeletionFromFolders *[]string `json:"EnableContentDeletionFromFolders"`
	EnableContentDownloading         *bool     `json:"EnableContentDownloading,omitempty"`
	EnableLiveTvAccess               *bool     `json:"EnableLiveTvAccess,omitempty"`
	EnableLiveTvManagement           *bool     `json:"EnableLiveTvManagement,omitempty"`

	// EnableLyricManagement Gets or sets a value indicating whether this user can manage lyrics.
	EnableLyricManagement           *bool `json:"EnableLyricManagement,omitempty"`
	EnableMediaConversion           *bool `json:"EnableMediaConversion,omitempty"`
	EnableMediaPlayback             *bool `json:"EnableMediaPlayback,omitempty"`
	EnablePlaybackRemuxing          *bool `json:"EnablePlaybackRemuxing,omitempty"`
	EnablePublicSharing             *bool `json:"EnablePublicSharing,omitempty"`
	EnableRemoteAccess              *bool `json:"EnableRemoteAccess,omitempty"`
	EnableRemoteControlOfOtherUsers *bool `json:"EnableRemoteControlOfOtherUsers,omitempty"`
	EnableSharedDeviceControl       *bool `json:"EnableSharedDeviceControl,omitempty"`

	// EnableSubtitleManagement Gets or sets a value indicating whether this instance can manage subtitles.
	EnableSubtitleManagement *bool `json:"EnableSubtitleManagement,omitempty"`

	// EnableSyncTranscoding Gets or sets a value indicating whether [enable synchronize].
	EnableSyncTranscoding          *bool     `json:"EnableSyncTranscoding,omitempty"`
	EnableUserPreferenceAccess     *bool     `json:"EnableUserPreferenceAccess,omitempty"`
	EnableVideoPlaybackTranscoding *bool     `json:"EnableVideoPlaybackTranscoding,omitempty"`
	EnabledChannels                *[]string `json:"EnabledChannels"`
	EnabledDevices                 *[]string `json:"EnabledDevices"`
	EnabledFolders                 *[]string `json:"EnabledFolders"`
	ForceRemoteSourceTranscoding   *bool     `json:"ForceRemoteSourceTranscoding,omitempty"`
	InvalidLoginAttemptCount       *int32    `json:"InvalidLoginAttemptCount,omitempty"`

	// IsAdministrator Gets or sets a value indicating whether this instance is administrator.
	IsAdministrator *bool `json:"IsAdministrator,omitempty"`

	// IsDisabled Gets or sets a value indicating whether this instance is disabled.
	IsDisabled *bool `json:"IsDisabled,omitempty"`

	// IsHidden Gets or sets a value indicating whether this instance is hidden.
	IsHidden                   *bool  `json:"IsHidden,omitempty"`
	LoginAttemptsBeforeLockout *int32 `json:"LoginAttemptsBeforeLockout,omitempty"`
	MaxActiveSessions          *int32 `json:"MaxActiveSessions,omitempty"`

	// MaxParentalRating Gets or sets the max parental rating.
	MaxParentalRating        *int32 `json:"MaxParentalRating"`
	PasswordResetProviderId  string `json:"PasswordResetProviderId"`
	RemoteClientBitrateLimit *int32 `json:"RemoteClientBitrateLimit,omitempty"`

	// SyncPlayAccess Gets or sets a value indicating what SyncPlay features the user can access.
	SyncPlayAccess *SyncPlayUserAccessType `json:"SyncPlayAccess,omitempty"`
}

// Video3DFormat defines model for Video3DFormat.
type Video3DFormat string

// VideoRange An enum representing video ranges.
type VideoRange string

// VideoType Enum VideoType.
type VideoType string

// GetUsersParams defines parameters for GetUsers.
type GetUsersParams struct {
	// IsHidden Optional filter by IsHidden=true or false.
	IsHidden *bool `form:"isHidden,omitempty" json:"isHidden,omitempty"`

	// IsDisabled Optional filter by IsDisabled=true or false.
	IsDisabled *bool `form:"isDisabled,omitempty" json:"isDisabled,omitempty"`
}

// UpdateUserApplicationWildcardPlusJSONBody defines parameters for UpdateUser.
type UpdateUserApplicationWildcardPlusJSONBody = UserDto

// UpdateUserJSONBody defines parameters for UpdateUser.
type UpdateUserJSONBody = UserDto

// UpdateUserParams defines parameters for UpdateUser.
type UpdateUserParams struct {
	// UserId The user id.
	UserId *string `form:"userId,omitempty" json:"userId,omitempty"`
}

// AuthenticateUserByNameApplicationWildcardPlusJSONBody defines parameters for AuthenticateUserByName.
type AuthenticateUserByNameApplicationWildcardPlusJSONBody = AuthenticateUserByName

// AuthenticateUserByNameJSONBody defines parameters for AuthenticateUserByName.
type AuthenticateUserByNameJSONBody = AuthenticateUserByName

// AuthenticateWithQuickConnectApplicationWildcardPlusJSONBody defines parameters for AuthenticateWithQuickConnect.
type AuthenticateWithQuickConnectApplicationWildcardPlusJSONBody = QuickConnectDto

// AuthenticateWithQuickConnectJSONBody defines parameters for AuthenticateWithQuickConnect.
type AuthenticateWithQuickConnectJSONBody = QuickConnectDto

// UpdateUserConfigurationApplicationWildcardPlusJSONBody defines parameters for UpdateUserConfiguration.
type UpdateUserConfigurationApplicationWildcardPlusJSONBody = UserConfiguration

// UpdateUserConfigurationJSONBody defines parameters for UpdateUserConfiguration.
type UpdateUserConfigurationJSONBody = UserConfiguration

// UpdateUserConfigurationParams defines parameters for UpdateUserConfiguration.
type UpdateUserConfigurationParams struct {
	// UserId The user id.
	UserId *string `form:"userId,omitempty" json:"userId,omitempty"`
}

// ForgotPasswordApplicationWildcardPlusJSONBody defines parameters for ForgotPassword.
type ForgotPasswordApplicationWildcardPlusJSONBody = ForgotPasswordDto

// ForgotPasswordJSONBody defines parameters for ForgotPassword.
type ForgotPasswordJSONBody = ForgotPasswordDto

// ForgotPasswordPinApplicationWildcardPlusJSONBody defines parameters for ForgotPasswordPin.
type ForgotPasswordPinApplicationWildcardPlusJSONBody = ForgotPasswordPinDto

// ForgotPasswordPinJSONBody defines parameters for ForgotPasswordPin.
type ForgotPasswordPinJSONBody = ForgotPasswordPinDto

// CreateUserByNameApplicationWildcardPlusJSONBody defines parameters for CreateUserByName.
type CreateUserByNameApplicationWildcardPlusJSONBody = CreateUserByName

// CreateUserByNameJSONBody defines parameters for CreateUserByName.
type CreateUserByNameJSONBody = CreateUserByName

// UpdateUserPasswordApplicationWildcardPlusJSONBody defines parameters for UpdateUserPassword.
type UpdateUserPasswordApplicationWildcardPlusJSONBody = UpdateUserPassword

// UpdateUserPasswordJSONBody defines parameters for UpdateUserPassword.
type UpdateUserPasswordJSONBody = UpdateUserPassword

// UpdateUserPasswordParams defines parameters for UpdateUserPassword.
type UpdateUserPasswordParams struct {
	// UserId The user id.
	UserId *string `form:"userId,omitempty" json:"userId,omitempty"`
}

// UpdateUserPolicyApplicationWildcardPlusJSONBody defines parameters for UpdateUserPolicy.
type UpdateUserPolicyApplicationWildcardPlusJSONBody = UserPolicy

// UpdateUserPolicyJSONBody defines parameters for UpdateUserPolicy.
type UpdateUserPolicyJSONBody = UserPolicy

// UpdateUserApplicationWildcardPlusJSONRequestBody defines body for UpdateUser for application/*+json ContentType.
type UpdateUserApplicationWildcardPlusJSONRequestBody = UpdateUserApplicationWildcardPlusJSONBody

// UpdateUserJSONRequestBody defines body for UpdateUser for application/json ContentType.
type UpdateUserJSONRequestBody = UpdateUserJSONBody

// AuthenticateUserByNameApplicationWildcardPlusJSONRequestBody defines body for AuthenticateUserByName for application/*+json ContentType.
type AuthenticateUserByNameApplicationWildcardPlusJSONRequestBody = AuthenticateUserByNameApplicationWildcardPlusJSONBody

// AuthenticateUserByNameJSONRequestBody defines body for AuthenticateUserByName for application/json ContentType.
type AuthenticateUserByNameJSONRequestBody = AuthenticateUserByNameJSONBody

// AuthenticateWithQuickConnectApplicationWildcardPlusJSONRequestBody defines body for AuthenticateWithQuickConnect for application/*+json ContentType.
type AuthenticateWithQuickConnectApplicationWildcardPlusJSONRequestBody = AuthenticateWithQuickConnectApplicationWildcardPlusJSONBody

// AuthenticateWithQuickConnectJSONRequestBody defines body for AuthenticateWithQuickConnect for application/json ContentType.
type AuthenticateWithQuickConnectJSONRequestBody = AuthenticateWithQuickConnectJSONBody

// UpdateUserConfigurationApplicationWildcardPlusJSONRequestBody defines body for UpdateUserConfiguration for application/*+json ContentType.
type UpdateUserConfigurationApplicationWildcardPlusJSONRequestBody = UpdateUserConfigurationApplicationWildcardPlusJSONBody

// UpdateUserConfigurationJSONRequestBody defines body for UpdateUserConfiguration for application/json ContentType.
type UpdateUserConfigurationJSONRequestBody = UpdateUserConfigurationJSONBody

// ForgotPasswordApplicationWildcardPlusJSONRequestBody defines body for ForgotPassword for application/*+json ContentType.
type ForgotPasswordApplicationWildcardPlusJSONRequestBody = ForgotPasswordApplicationWildcardPlusJSONBody

// ForgotPasswordJSONRequestBody defines body for ForgotPassword for application/json ContentType.
type ForgotPasswordJSONRequestBody = ForgotPasswordJSONBody

// ForgotPasswordPinApplicationWildcardPlusJSONRequestBody defines body for ForgotPasswordPin for application/*+json ContentType.
type ForgotPasswordPinApplicationWildcardPlusJSONRequestBody = ForgotPasswordPinApplicationWildcardPlusJSONBody

// ForgotPasswordPinJSONRequestBody defines body for ForgotPasswordPin for application/json ContentType.
type ForgotPasswordPinJSONRequestBody = ForgotPasswordPinJSONBody

// CreateUserByNameApplicationWildcardPlusJSONRequestBody defines body for CreateUserByName for application/*+json ContentType.
type CreateUserByNameApplicationWildcardPlusJSONRequestBody = CreateUserByNameApplicationWildcardPlusJSONBody

// CreateUserByNameJSONRequestBody defines body for CreateUserByName for application/json ContentType.
type CreateUserByNameJSONRequestBody = CreateUserByNameJSONBody

// UpdateUserPasswordApplicationWildcardPlusJSONRequestBody defines body for UpdateUserPassword for application/*+json ContentType.
type UpdateUserPasswordApplicationWildcardPlusJSONRequestBody = UpdateUserPasswordApplicationWildcardPlusJSONBody

// UpdateUserPasswordJSONRequestBody defines body for UpdateUserPassword for application/json ContentType.
type UpdateUserPasswordJSONRequestBody = UpdateUserPasswordJSONBody

// UpdateUserPolicyApplicationWildcardPlusJSONRequestBody defines body for UpdateUserPolicy for application/*+json ContentType.
type UpdateUserPolicyApplicationWildcardPlusJSONRequestBody = UpdateUserPolicyApplicationWildcardPlusJSONBody

// UpdateUserPolicyJSONRequestBody defines body for UpdateUserPolicy for application/json ContentType.
type UpdateUserPolicyJSONRequestBody = UpdateUserPolicyJSONBody

// Getter for additional properties for ProblemDetails. Returns the specified
// element and whether it was found
func (a ProblemDetails) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ProblemDetails
func (a *ProblemDetails) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ProblemDetails to handle AdditionalProperties
func (a *ProblemDetails) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["detail"]; found {
		err = json.Unmarshal(raw, &a.Detail)
		if err != nil {
			return fmt.Errorf("error reading 'detail': %w", err)
		}
		delete(object, "detail")
	}

	if raw, found := object["instance"]; found {
		err = json.Unmarshal(raw, &a.Instance)
		if err != nil {
			return fmt.Errorf("error reading 'instance': %w", err)
		}
		delete(object, "instance")
	}

	if raw, found := object["status"]; found {
		err = json.Unmarshal(raw, &a.Status)
		if err != nil {
			return fmt.Errorf("error reading 'status': %w", err)
		}
		delete(object, "status")
	}

	if raw, found := object["title"]; found {
		err = json.Unmarshal(raw, &a.Title)
		if err != nil {
			return fmt.Errorf("error reading 'title': %w", err)
		}
		delete(object, "title")
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &a.Type)
		if err != nil {
			return fmt.Errorf("error reading 'type': %w", err)
		}
		delete(object, "type")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ProblemDetails to handle AdditionalProperties
func (a ProblemDetails) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Detail != nil {
		object["detail"], err = json.Marshal(a.Detail)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'detail': %w", err)
		}
	}

	if a.Instance != nil {
		object["instance"], err = json.Marshal(a.Instance)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'instance': %w", err)
		}
	}

	if a.Status != nil {
		object["status"], err = json.Marshal(a.Status)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'status': %w", err)
		}
	}

	if a.Title != nil {
		object["title"], err = json.Marshal(a.Title)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'title': %w", err)
		}
	}

	if a.Type != nil {
		object["type"], err = json.Marshal(a.Type)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'type': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}
